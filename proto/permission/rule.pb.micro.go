// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/permission/rule.proto

package permission

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Rule service

func NewRuleEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Rule service

type RuleService interface {
	// 添加
	Add(ctx context.Context, in *RuleAddRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 更新
	Update(ctx context.Context, in *RuleUpdateRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 删除
	Delete(ctx context.Context, in *RuleDeleteRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 获取
	Get(ctx context.Context, in *RuleGetRequest, opts ...client.CallOption) (*RuleGetResponse, error)
	// 列举
	List(ctx context.Context, in *RuleListRequest, opts ...client.CallOption) (*RuleListResponse, error)
	// 搜索
	Search(ctx context.Context, in *RuleSearchRequest, opts ...client.CallOption) (*RuleListResponse, error)
	// 导出
	Export(ctx context.Context, in *RuleExportRequest, opts ...client.CallOption) (*RuleExportResponse, error)
	// 导入
	Import(ctx context.Context, in *RuleImportRequest, opts ...client.CallOption) (*RuleImportResponse, error)
}

type ruleService struct {
	c    client.Client
	name string
}

func NewRuleService(name string, c client.Client) RuleService {
	return &ruleService{
		c:    c,
		name: name,
	}
}

func (c *ruleService) Add(ctx context.Context, in *RuleAddRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Rule.Add", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleService) Update(ctx context.Context, in *RuleUpdateRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Rule.Update", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleService) Delete(ctx context.Context, in *RuleDeleteRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Rule.Delete", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleService) Get(ctx context.Context, in *RuleGetRequest, opts ...client.CallOption) (*RuleGetResponse, error) {
	req := c.c.NewRequest(c.name, "Rule.Get", in)
	out := new(RuleGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleService) List(ctx context.Context, in *RuleListRequest, opts ...client.CallOption) (*RuleListResponse, error) {
	req := c.c.NewRequest(c.name, "Rule.List", in)
	out := new(RuleListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleService) Search(ctx context.Context, in *RuleSearchRequest, opts ...client.CallOption) (*RuleListResponse, error) {
	req := c.c.NewRequest(c.name, "Rule.Search", in)
	out := new(RuleListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleService) Export(ctx context.Context, in *RuleExportRequest, opts ...client.CallOption) (*RuleExportResponse, error) {
	req := c.c.NewRequest(c.name, "Rule.Export", in)
	out := new(RuleExportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleService) Import(ctx context.Context, in *RuleImportRequest, opts ...client.CallOption) (*RuleImportResponse, error) {
	req := c.c.NewRequest(c.name, "Rule.Import", in)
	out := new(RuleImportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rule service

type RuleHandler interface {
	// 添加
	Add(context.Context, *RuleAddRequest, *UuidResponse) error
	// 更新
	Update(context.Context, *RuleUpdateRequest, *UuidResponse) error
	// 删除
	Delete(context.Context, *RuleDeleteRequest, *UuidResponse) error
	// 获取
	Get(context.Context, *RuleGetRequest, *RuleGetResponse) error
	// 列举
	List(context.Context, *RuleListRequest, *RuleListResponse) error
	// 搜索
	Search(context.Context, *RuleSearchRequest, *RuleListResponse) error
	// 导出
	Export(context.Context, *RuleExportRequest, *RuleExportResponse) error
	// 导入
	Import(context.Context, *RuleImportRequest, *RuleImportResponse) error
}

func RegisterRuleHandler(s server.Server, hdlr RuleHandler, opts ...server.HandlerOption) error {
	type rule interface {
		Add(ctx context.Context, in *RuleAddRequest, out *UuidResponse) error
		Update(ctx context.Context, in *RuleUpdateRequest, out *UuidResponse) error
		Delete(ctx context.Context, in *RuleDeleteRequest, out *UuidResponse) error
		Get(ctx context.Context, in *RuleGetRequest, out *RuleGetResponse) error
		List(ctx context.Context, in *RuleListRequest, out *RuleListResponse) error
		Search(ctx context.Context, in *RuleSearchRequest, out *RuleListResponse) error
		Export(ctx context.Context, in *RuleExportRequest, out *RuleExportResponse) error
		Import(ctx context.Context, in *RuleImportRequest, out *RuleImportResponse) error
	}
	type Rule struct {
		rule
	}
	h := &ruleHandler{hdlr}
	return s.Handle(s.NewHandler(&Rule{h}, opts...))
}

type ruleHandler struct {
	RuleHandler
}

func (h *ruleHandler) Add(ctx context.Context, in *RuleAddRequest, out *UuidResponse) error {
	return h.RuleHandler.Add(ctx, in, out)
}

func (h *ruleHandler) Update(ctx context.Context, in *RuleUpdateRequest, out *UuidResponse) error {
	return h.RuleHandler.Update(ctx, in, out)
}

func (h *ruleHandler) Delete(ctx context.Context, in *RuleDeleteRequest, out *UuidResponse) error {
	return h.RuleHandler.Delete(ctx, in, out)
}

func (h *ruleHandler) Get(ctx context.Context, in *RuleGetRequest, out *RuleGetResponse) error {
	return h.RuleHandler.Get(ctx, in, out)
}

func (h *ruleHandler) List(ctx context.Context, in *RuleListRequest, out *RuleListResponse) error {
	return h.RuleHandler.List(ctx, in, out)
}

func (h *ruleHandler) Search(ctx context.Context, in *RuleSearchRequest, out *RuleListResponse) error {
	return h.RuleHandler.Search(ctx, in, out)
}

func (h *ruleHandler) Export(ctx context.Context, in *RuleExportRequest, out *RuleExportResponse) error {
	return h.RuleHandler.Export(ctx, in, out)
}

func (h *ruleHandler) Import(ctx context.Context, in *RuleImportRequest, out *RuleImportResponse) error {
	return h.RuleHandler.Import(ctx, in, out)
}
