// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/permission/scope.proto

package permission

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Scope service

func NewScopeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Scope service

type ScopeService interface {
	// 创建
	Create(ctx context.Context, in *ScopeCreateRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 更新
	Update(ctx context.Context, in *ScopeUpdateRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 删除
	Delete(ctx context.Context, in *ScopeDeleteRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 获取
	Get(ctx context.Context, in *ScopeGetRequest, opts ...client.CallOption) (*ScopeGetResponse, error)
	// 列举
	List(ctx context.Context, in *ScopeListRequest, opts ...client.CallOption) (*ScopeListResponse, error)
	// 搜索
	Search(ctx context.Context, in *ScopeSearchRequest, opts ...client.CallOption) (*ScopeListResponse, error)
}

type scopeService struct {
	c    client.Client
	name string
}

func NewScopeService(name string, c client.Client) ScopeService {
	return &scopeService{
		c:    c,
		name: name,
	}
}

func (c *scopeService) Create(ctx context.Context, in *ScopeCreateRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Scope.Create", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeService) Update(ctx context.Context, in *ScopeUpdateRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Scope.Update", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeService) Delete(ctx context.Context, in *ScopeDeleteRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Scope.Delete", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeService) Get(ctx context.Context, in *ScopeGetRequest, opts ...client.CallOption) (*ScopeGetResponse, error) {
	req := c.c.NewRequest(c.name, "Scope.Get", in)
	out := new(ScopeGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeService) List(ctx context.Context, in *ScopeListRequest, opts ...client.CallOption) (*ScopeListResponse, error) {
	req := c.c.NewRequest(c.name, "Scope.List", in)
	out := new(ScopeListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeService) Search(ctx context.Context, in *ScopeSearchRequest, opts ...client.CallOption) (*ScopeListResponse, error) {
	req := c.c.NewRequest(c.name, "Scope.Search", in)
	out := new(ScopeListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scope service

type ScopeHandler interface {
	// 创建
	Create(context.Context, *ScopeCreateRequest, *UuidResponse) error
	// 更新
	Update(context.Context, *ScopeUpdateRequest, *UuidResponse) error
	// 删除
	Delete(context.Context, *ScopeDeleteRequest, *UuidResponse) error
	// 获取
	Get(context.Context, *ScopeGetRequest, *ScopeGetResponse) error
	// 列举
	List(context.Context, *ScopeListRequest, *ScopeListResponse) error
	// 搜索
	Search(context.Context, *ScopeSearchRequest, *ScopeListResponse) error
}

func RegisterScopeHandler(s server.Server, hdlr ScopeHandler, opts ...server.HandlerOption) error {
	type scope interface {
		Create(ctx context.Context, in *ScopeCreateRequest, out *UuidResponse) error
		Update(ctx context.Context, in *ScopeUpdateRequest, out *UuidResponse) error
		Delete(ctx context.Context, in *ScopeDeleteRequest, out *UuidResponse) error
		Get(ctx context.Context, in *ScopeGetRequest, out *ScopeGetResponse) error
		List(ctx context.Context, in *ScopeListRequest, out *ScopeListResponse) error
		Search(ctx context.Context, in *ScopeSearchRequest, out *ScopeListResponse) error
	}
	type Scope struct {
		scope
	}
	h := &scopeHandler{hdlr}
	return s.Handle(s.NewHandler(&Scope{h}, opts...))
}

type scopeHandler struct {
	ScopeHandler
}

func (h *scopeHandler) Create(ctx context.Context, in *ScopeCreateRequest, out *UuidResponse) error {
	return h.ScopeHandler.Create(ctx, in, out)
}

func (h *scopeHandler) Update(ctx context.Context, in *ScopeUpdateRequest, out *UuidResponse) error {
	return h.ScopeHandler.Update(ctx, in, out)
}

func (h *scopeHandler) Delete(ctx context.Context, in *ScopeDeleteRequest, out *UuidResponse) error {
	return h.ScopeHandler.Delete(ctx, in, out)
}

func (h *scopeHandler) Get(ctx context.Context, in *ScopeGetRequest, out *ScopeGetResponse) error {
	return h.ScopeHandler.Get(ctx, in, out)
}

func (h *scopeHandler) List(ctx context.Context, in *ScopeListRequest, out *ScopeListResponse) error {
	return h.ScopeHandler.List(ctx, in, out)
}

func (h *scopeHandler) Search(ctx context.Context, in *ScopeSearchRequest, out *ScopeListResponse) error {
	return h.ScopeHandler.Search(ctx, in, out)
}
